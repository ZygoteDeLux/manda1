<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/style.css">
    <title>week5</title>
</head>
<body>

    <nav>
        <ul>
            <li><a href="/home">home</a></li>
            <li><a href="/week1">Week 1</a></li>
            <li><a href="/week2">Week 2</a></li>
            <li><a href="/week3">Week 3</a></li>
            <li><a href="/week4">Week 4</a></li>
           
        </ul>
    </nav>

    <div class="headline">
        <h1>Week 5</h1>
    </div>

    <div class="content">

        <div class="subHeadline">
            Can import/export in both ways in Node.js.
        </div>
        <br>
            common way.<br>
            <div class="code">
                <code>
                    // Import<br>
                    const foo = require('foo');<br>
                    <br>
                    // Export<br>
                    module.exports = function() { /* your code */ };<br>
                </code>
            </div>
            using ES modules<br>
            <div class="code">
                <code>
                    // Import<br>
                    import foo from 'foo';<br>
                    <br>
                    // Export<br>
                    export function someFunction() { /* your code */ }<br>
                </code>
            </div>
        <br>
        <div class="subHeadline">
            Understands the security need for serving static files and can do it in Express.
        </div>
        Access Control: Ensuring that only authorized users can access certain static files.<br>
        Path Traversal Attacks: Prevent attackers from accessing sensitive files outside of the static folder.<br>
        File Type Restrictions: Serving only the intended types of files to prevent malicious use.<br>
        Caching and Performance: Properly configured headers for optimized and secure content delivery.<br>
        Content Sniffing: Ensuring that browsers interpret files only in the manner they are intended to be.<br>
        <br>
        <div class="subHeadline">
            XSS: Understands the problem and how to avoid it.<br>
        </div>
        <br>
        Cross-Site Scripting (XSS) is a security vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users.<br>
        These scripts can steal information, manipulate web content, and perform actions on behalf of the user without their consent.<br>
        <br>
        <div class="subHeadline1">
            Types of XSS:<br>
        </div>
        <br>
        Stored XSS: The malicious script is permanently stored on the target server.<br>
        Reflected XSS: The malicious script is embedded in a URL and only activates when the user clicks on the manipulated link.<br>
        DOM-based XSS: The malicious script manipulates the DOM to execute the payload.<br>
        <br>
        <div class="subHeadline1">
            a How to Avoid XSS<br>
        </div>
        <br>
        Input Validation: Validate user inputs to ensure they conform to expected formats.<br>
        Output Encoding: Encode data when you're inserting content into HTML, JavaScript, CSS, etc. to ensure it's treated as data, not executable code.<br>
        Sanitization: Use libraries that sanitize user input, removing potential malicious code.<br>
        Use Content Security Policy (CSP): CSP helps in preventing the loading of malicious assets.<br>
        HTTP-Only Cookies: Use HTTP-only flags for cookies to prevent client-side scripts from accessing sensitive data.<br>
        Escaping: Escape special characters relevant to the HTML context (like <, >, &, etc.).<br>

    </div>
    
</body>
</html>